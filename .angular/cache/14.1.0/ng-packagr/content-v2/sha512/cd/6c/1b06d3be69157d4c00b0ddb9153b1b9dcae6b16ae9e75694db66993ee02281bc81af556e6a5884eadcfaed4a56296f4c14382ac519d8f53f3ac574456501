{"hash":"83066b630446fe3d71e389c814d332bd71ba4271","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Directive, Inject, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.13/js/utils.js';\r\nclass NgxPhoneInputDirective {\r\n    constructor(el, platformId) {\r\n        this.el = el;\r\n        this.platformId = platformId;\r\n        this.phoneInputOptions = {};\r\n        this.hasError = new EventEmitter();\r\n        this.phoneOutput = new EventEmitter();\r\n        this.countryChange = new EventEmitter();\r\n        this.intlTelInputObject = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.phoneInputOptions = {\r\n                ...this.phoneInputOptions,\r\n                utilsScript: this.getUtilsScript(this.phoneInputOptions)\r\n            };\r\n            this.intlTelInput = window.intlTelInput(this.el.nativeElement, {\r\n                ...this.phoneInputOptions\r\n            });\r\n            this.el.nativeElement.addEventListener(\"countrychange\", () => {\r\n                this.countryChange.emit(this.intlTelInput.getSelectedCountryData());\r\n            });\r\n            this.intlTelInputObject.emit(this.intlTelInput);\r\n        }\r\n    }\r\n    onBlur() {\r\n        let isInputValid = this.isInputValid();\r\n        if (isInputValid) {\r\n            let telOutput = this.intlTelInput.getNumber();\r\n            this.hasError.emit(isInputValid);\r\n            this.phoneOutput.emit(telOutput);\r\n        }\r\n        else {\r\n            this.hasError.emit(isInputValid);\r\n        }\r\n    }\r\n    isInputValid() {\r\n        return this.intlTelInput.isValidNumber();\r\n    }\r\n    setCountry(country) {\r\n        this.intlTelInput.setCountry(country);\r\n    }\r\n    getUtilsScript(options) {\r\n        return options.utilsScript || defaultUtilScript;\r\n    }\r\n}\r\nNgxPhoneInputDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputDirective, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxPhoneInputDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.1.0\", type: NgxPhoneInputDirective, selector: \"[ngxPhoneInput]\", inputs: { phoneInputOptions: \"phoneInputOptions\" }, outputs: { hasError: \"hasError\", phoneOutput: \"phoneOutput\", countryChange: \"countryChange\", intlTelInputObject: \"intlTelInputObject\" }, host: { listeners: { \"blur\": \"onBlur()\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxPhoneInput]',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }]; }, propDecorators: { phoneInputOptions: [{\r\n                type: Input,\r\n                args: ['phoneInputOptions']\r\n            }], hasError: [{\r\n                type: Output,\r\n                args: ['hasError']\r\n            }], phoneOutput: [{\r\n                type: Output,\r\n                args: ['phoneOutput']\r\n            }], countryChange: [{\r\n                type: Output,\r\n                args: ['countryChange']\r\n            }], intlTelInputObject: [{\r\n                type: Output,\r\n                args: ['intlTelInputObject']\r\n            }], onBlur: [{\r\n                type: HostListener,\r\n                args: ['blur']\r\n            }] } });\n\nclass NgxPhoneInputModule {\r\n}\r\nNgxPhoneInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPhoneInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule, declarations: [NgxPhoneInputDirective], exports: [NgxPhoneInputDirective] });\r\nNgxPhoneInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxPhoneInputDirective\r\n                    ],\r\n                    imports: [],\r\n                    exports: [NgxPhoneInputDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-phone-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPhoneInputDirective, NgxPhoneInputModule };\n//# sourceMappingURL=dennicya-ngx-phone-input.mjs.map\n","map":{"version":3,"file":"dennicya-ngx-phone-input.mjs","sources":["../../../projects/ngx-phone-input/src/lib/ngx-phone-input.directive.ts","../../../projects/ngx-phone-input/src/lib/ngx-phone-input.module.ts","../../../projects/ngx-phone-input/src/public-api.ts","../../../projects/ngx-phone-input/src/dennicya-ngx-phone-input.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  OnInit,\n  Output,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare const window: any;\nconst defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.13/js/utils.js';\n\n@Directive({\n  selector: '[ngxPhoneInput]',\n})\nexport class NgxPhoneInputDirective implements OnInit {\n\n  @Input('phoneInputOptions') phoneInputOptions: { [key: string]: any } = {};\n  @Output('hasError') hasError: EventEmitter<boolean> = new EventEmitter();\n  @Output('phoneOutput') phoneOutput: EventEmitter<any> = new EventEmitter();\n  @Output('countryChange') countryChange: EventEmitter<any> = new EventEmitter();\n  @Output('intlTelInputObject') intlTelInputObject: EventEmitter<any> = new EventEmitter();\n\n  intlTelInput: any;\n\n  constructor(private el: ElementRef,\n              @Inject(PLATFORM_ID) private platformId: string) {\n  }\n\n  ngOnInit() {\n\n    if (isPlatformBrowser(this.platformId)) {\n      this.phoneInputOptions = {\n        ...this.phoneInputOptions,\n        utilsScript: this.getUtilsScript(this.phoneInputOptions)\n      };\n      this.intlTelInput = window.intlTelInput(this.el.nativeElement, {\n        ...this.phoneInputOptions\n      });\n\n      this.el.nativeElement.addEventListener(\"countrychange\", () => {\n        this.countryChange.emit(this.intlTelInput.getSelectedCountryData());\n      });\n\n      this.intlTelInputObject.emit(this.intlTelInput);\n    }\n  }\n\n  @HostListener('blur') onBlur() {\n    let isInputValid: boolean = this.isInputValid();\n    if (isInputValid) {\n      let telOutput = this.intlTelInput.getNumber();\n      this.hasError.emit(isInputValid);\n      this.phoneOutput.emit(telOutput);\n    } else {\n      this.hasError.emit(isInputValid);\n    }\n  }\n\n  isInputValid(): boolean {\n    return this.intlTelInput.isValidNumber();\n  }\n\n  setCountry(country: any) {\n    this.intlTelInput.setCountry(country);\n  }\n\n  getUtilsScript(options: any) {\n    return options.utilsScript || defaultUtilScript;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxPhoneInputDirective } from './ngx-phone-input.directive';\n\n\n@NgModule({\n  declarations: [\n    NgxPhoneInputDirective\n  ],\n  imports: [],\n  exports: [NgxPhoneInputDirective]\n})\nexport class NgxPhoneInputModule {\n}\n","/*\n * Public API Surface of ngx-phone-input\n */\n\nexport * from './lib/ngx-phone-input.directive';\nexport * from './lib/ngx-phone-input.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Directive, Inject, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.13/js/utils.js';\r\nclass NgxPhoneInputDirective {\r\n    constructor(el, platformId) {\r\n        this.el = el;\r\n        this.platformId = platformId;\r\n        this.phoneInputOptions = {};\r\n        this.hasError = new EventEmitter();\r\n        this.phoneOutput = new EventEmitter();\r\n        this.countryChange = new EventEmitter();\r\n        this.intlTelInputObject = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.phoneInputOptions = Object.assign(Object.assign({}, this.phoneInputOptions), { utilsScript: this.getUtilsScript(this.phoneInputOptions) });\r\n            this.intlTelInput = window.intlTelInput(this.el.nativeElement, Object.assign({}, this.phoneInputOptions));\r\n            this.el.nativeElement.addEventListener(\"countrychange\", () => {\r\n                this.countryChange.emit(this.intlTelInput.getSelectedCountryData());\r\n            });\r\n            this.intlTelInputObject.emit(this.intlTelInput);\r\n        }\r\n    }\r\n    onBlur() {\r\n        let isInputValid = this.isInputValid();\r\n        if (isInputValid) {\r\n            let telOutput = this.intlTelInput.getNumber();\r\n            this.hasError.emit(isInputValid);\r\n            this.phoneOutput.emit(telOutput);\r\n        }\r\n        else {\r\n            this.hasError.emit(isInputValid);\r\n        }\r\n    }\r\n    isInputValid() {\r\n        return this.intlTelInput.isValidNumber();\r\n    }\r\n    setCountry(country) {\r\n        this.intlTelInput.setCountry(country);\r\n    }\r\n    getUtilsScript(options) {\r\n        return options.utilsScript || defaultUtilScript;\r\n    }\r\n}\r\nNgxPhoneInputDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputDirective, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxPhoneInputDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.1.0\", type: NgxPhoneInputDirective, selector: \"[ngxPhoneInput]\", inputs: { phoneInputOptions: \"phoneInputOptions\" }, outputs: { hasError: \"hasError\", phoneOutput: \"phoneOutput\", countryChange: \"countryChange\", intlTelInputObject: \"intlTelInputObject\" }, host: { listeners: { \"blur\": \"onBlur()\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxPhoneInput]',\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [PLATFORM_ID]\r\n                    }] }];\r\n    }, propDecorators: { phoneInputOptions: [{\r\n                type: Input,\r\n                args: ['phoneInputOptions']\r\n            }], hasError: [{\r\n                type: Output,\r\n                args: ['hasError']\r\n            }], phoneOutput: [{\r\n                type: Output,\r\n                args: ['phoneOutput']\r\n            }], countryChange: [{\r\n                type: Output,\r\n                args: ['countryChange']\r\n            }], intlTelInputObject: [{\r\n                type: Output,\r\n                args: ['intlTelInputObject']\r\n            }], onBlur: [{\r\n                type: HostListener,\r\n                args: ['blur']\r\n            }] } });\n\nclass NgxPhoneInputModule {\r\n}\r\nNgxPhoneInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPhoneInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule, declarations: [NgxPhoneInputDirective], exports: [NgxPhoneInputDirective] });\r\nNgxPhoneInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.0\", ngImport: i0, type: NgxPhoneInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxPhoneInputDirective\r\n                    ],\r\n                    imports: [],\r\n                    exports: [NgxPhoneInputDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-phone-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPhoneInputDirective, NgxPhoneInputModule };\n//# sourceMappingURL=dennicya-ngx-phone-input.mjs.map\n","map":{"version":3,"file":"dennicya-ngx-phone-input.mjs","sources":["../../../projects/ngx-phone-input/src/lib/ngx-phone-input.directive.ts","../../../projects/ngx-phone-input/src/lib/ngx-phone-input.module.ts","../../../projects/ngx-phone-input/src/public-api.ts","../../../projects/ngx-phone-input/src/dennicya-ngx-phone-input.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  OnInit,\n  Output,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare const window: any;\nconst defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.13/js/utils.js';\n\n@Directive({\n  selector: '[ngxPhoneInput]',\n})\nexport class NgxPhoneInputDirective implements OnInit {\n\n  @Input('phoneInputOptions') phoneInputOptions: { [key: string]: any } = {};\n  @Output('hasError') hasError: EventEmitter<boolean> = new EventEmitter();\n  @Output('phoneOutput') phoneOutput: EventEmitter<any> = new EventEmitter();\n  @Output('countryChange') countryChange: EventEmitter<any> = new EventEmitter();\n  @Output('intlTelInputObject') intlTelInputObject: EventEmitter<any> = new EventEmitter();\n\n  intlTelInput: any;\n\n  constructor(private el: ElementRef,\n              @Inject(PLATFORM_ID) private platformId: string) {\n  }\n\n  ngOnInit() {\n\n    if (isPlatformBrowser(this.platformId)) {\n      this.phoneInputOptions = {\n        ...this.phoneInputOptions,\n        utilsScript: this.getUtilsScript(this.phoneInputOptions)\n      };\n      this.intlTelInput = window.intlTelInput(this.el.nativeElement, {\n        ...this.phoneInputOptions\n      });\n\n      this.el.nativeElement.addEventListener(\"countrychange\", () => {\n        this.countryChange.emit(this.intlTelInput.getSelectedCountryData());\n      });\n\n      this.intlTelInputObject.emit(this.intlTelInput);\n    }\n  }\n\n  @HostListener('blur') onBlur() {\n    let isInputValid: boolean = this.isInputValid();\n    if (isInputValid) {\n      let telOutput = this.intlTelInput.getNumber();\n      this.hasError.emit(isInputValid);\n      this.phoneOutput.emit(telOutput);\n    } else {\n      this.hasError.emit(isInputValid);\n    }\n  }\n\n  isInputValid(): boolean {\n    return this.intlTelInput.isValidNumber();\n  }\n\n  setCountry(country: any) {\n    this.intlTelInput.setCountry(country);\n  }\n\n  getUtilsScript(options: any) {\n    return options.utilsScript || defaultUtilScript;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxPhoneInputDirective } from './ngx-phone-input.directive';\n\n\n@NgModule({\n  declarations: [\n    NgxPhoneInputDirective\n  ],\n  imports: [],\n  exports: [NgxPhoneInputDirective]\n})\nexport class NgxPhoneInputModule {\n}\n","/*\n * Public API Surface of ngx-phone-input\n */\n\nexport * from './lib/ngx-phone-input.directive';\nexport * from './lib/ngx-phone-input.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}